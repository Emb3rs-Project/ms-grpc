# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cf import cf_pb2 as cf_dot_cf__pb2


class CFModuleStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.convert_sink = channel.unary_unary(
                '/cf.CFModule/convert_sink',
                request_serializer=cf_dot_cf__pb2.PlatformOnlyInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.ConvertSinkOutput.FromString,
                )
        self.convert_source = channel.unary_unary(
                '/cf.CFModule/convert_source',
                request_serializer=cf_dot_cf__pb2.ConvertSourceInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.ConvertSourceOutput.FromString,
                )
        self.convert_pinch = channel.unary_unary(
                '/cf.CFModule/convert_pinch',
                request_serializer=cf_dot_cf__pb2.PlatformOnlyInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.ConvertPinchOutput.FromString,
                )
        self.convert_orc = channel.unary_unary(
                '/cf.CFModule/convert_orc',
                request_serializer=cf_dot_cf__pb2.PlatformOnlyInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.ConvertOrcOutput.FromString,
                )
        self.char_simple = channel.unary_unary(
                '/cf.CFModule/char_simple',
                request_serializer=cf_dot_cf__pb2.CharacterizationInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.CharacterizationSourceOutput.FromString,
                )
        self.char_building = channel.unary_unary(
                '/cf.CFModule/char_building',
                request_serializer=cf_dot_cf__pb2.CharacterizationInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.CharacterizationSinkOutput.FromString,
                )
        self.char_greenhouse = channel.unary_unary(
                '/cf.CFModule/char_greenhouse',
                request_serializer=cf_dot_cf__pb2.CharacterizationInput.SerializeToString,
                response_deserializer=cf_dot_cf__pb2.CharacterizationSinkOutput.FromString,
                )


class CFModuleServicer(object):
    """Missing associated documentation comment in .proto file."""

    def convert_sink(self, request, context):
        """Simulation Convert Sink
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def convert_source(self, request, context):
        """Simulation Convert Sources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def convert_pinch(self, request, context):
        """Simulation Convert Pinch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def convert_orc(self, request, context):
        """Simulation Convert ORC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def char_simple(self, request, context):
        """Characterization Detailed
        rpc char_detailed(CharacterizationInput) returns (CharacterizationSourceOutput);

        Characterization Simple
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def char_building(self, request, context):
        """Characterization Building
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def char_greenhouse(self, request, context):
        """Characterization Greenhouse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CFModuleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'convert_sink': grpc.unary_unary_rpc_method_handler(
                    servicer.convert_sink,
                    request_deserializer=cf_dot_cf__pb2.PlatformOnlyInput.FromString,
                    response_serializer=cf_dot_cf__pb2.ConvertSinkOutput.SerializeToString,
            ),
            'convert_source': grpc.unary_unary_rpc_method_handler(
                    servicer.convert_source,
                    request_deserializer=cf_dot_cf__pb2.ConvertSourceInput.FromString,
                    response_serializer=cf_dot_cf__pb2.ConvertSourceOutput.SerializeToString,
            ),
            'convert_pinch': grpc.unary_unary_rpc_method_handler(
                    servicer.convert_pinch,
                    request_deserializer=cf_dot_cf__pb2.PlatformOnlyInput.FromString,
                    response_serializer=cf_dot_cf__pb2.ConvertPinchOutput.SerializeToString,
            ),
            'convert_orc': grpc.unary_unary_rpc_method_handler(
                    servicer.convert_orc,
                    request_deserializer=cf_dot_cf__pb2.PlatformOnlyInput.FromString,
                    response_serializer=cf_dot_cf__pb2.ConvertOrcOutput.SerializeToString,
            ),
            'char_simple': grpc.unary_unary_rpc_method_handler(
                    servicer.char_simple,
                    request_deserializer=cf_dot_cf__pb2.CharacterizationInput.FromString,
                    response_serializer=cf_dot_cf__pb2.CharacterizationSourceOutput.SerializeToString,
            ),
            'char_building': grpc.unary_unary_rpc_method_handler(
                    servicer.char_building,
                    request_deserializer=cf_dot_cf__pb2.CharacterizationInput.FromString,
                    response_serializer=cf_dot_cf__pb2.CharacterizationSinkOutput.SerializeToString,
            ),
            'char_greenhouse': grpc.unary_unary_rpc_method_handler(
                    servicer.char_greenhouse,
                    request_deserializer=cf_dot_cf__pb2.CharacterizationInput.FromString,
                    response_serializer=cf_dot_cf__pb2.CharacterizationSinkOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cf.CFModule', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CFModule(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def convert_sink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/convert_sink',
            cf_dot_cf__pb2.PlatformOnlyInput.SerializeToString,
            cf_dot_cf__pb2.ConvertSinkOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def convert_source(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/convert_source',
            cf_dot_cf__pb2.ConvertSourceInput.SerializeToString,
            cf_dot_cf__pb2.ConvertSourceOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def convert_pinch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/convert_pinch',
            cf_dot_cf__pb2.PlatformOnlyInput.SerializeToString,
            cf_dot_cf__pb2.ConvertPinchOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def convert_orc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/convert_orc',
            cf_dot_cf__pb2.PlatformOnlyInput.SerializeToString,
            cf_dot_cf__pb2.ConvertOrcOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def char_simple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/char_simple',
            cf_dot_cf__pb2.CharacterizationInput.SerializeToString,
            cf_dot_cf__pb2.CharacterizationSourceOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def char_building(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/char_building',
            cf_dot_cf__pb2.CharacterizationInput.SerializeToString,
            cf_dot_cf__pb2.CharacterizationSinkOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def char_greenhouse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cf.CFModule/char_greenhouse',
            cf_dot_cf__pb2.CharacterizationInput.SerializeToString,
            cf_dot_cf__pb2.CharacterizationSinkOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
